=======Enhancements/Future Work========
-uml2java Rule4::attributeVisibility::backwardCalculation => uml::VisibilityKind::package
-^ Possibly the same problem in Rule5
Polynomial time execution?
How about efficiency?
Mote could be easier to debug
-WHEN SYNCHRONIZATION NOT POSSIBLE, AT LEAST HIGHLIGHT RELATIONS, SO THAT IT CAN BE DONE MANUALLY BY THE MAINTAINER/DEVELOPER



=======Eclipse Mars for Model developing========
-Install EMF Compare?
-Install Ecore Tools
-Install Mote Plugin (http://download.eclipse.org/ecoretools/updates/releases/3.0.1/mars) (With errors?)

=======Creating a transformation========
-New Mote Project without any source or target meta model (choose your models here, in order for the transformation to work properly)
-All the fields in the creation have to be concise (inclusive URI, name, etc)
-In .ecore file created by default load resource (choose your source and target ecore metamodels ?)
-Change TGG ID according to the project name (de.silvawb.xxx); TGG Name stay simple
-Now on the mltgg file initialize the mltgg_diagram file (One diagram file for each rule group; and one rule for each rule group)
-Load resources in this file too (Source and target metamodels)
-Create Rule

=======Executing Transformation=========
-In a MoTE Project
-Execute the create operational rules workflow
---1st Alternative: 
-----Run as Eclipse plugin
---2nd Alternative:
-----Export project to jar (Export... Plugin)
-----add folder model-gen manually to the jar
-----place it in plugins folder from eclipse
-----restart eclipse
-create an example project mds2uml launch from MoTe
-change it/configure it so that it matches your project
-create a left side example model
-create a right side example model
-execute the workflow

=======Create Any Example Model=========
-New... Ecore Modeling Project
-Paste or create .ecore file describing the model
-New... EMF Generator model regarded to the model just created
-Open the .genmodel model, set the base package name according to the name of your project
-Right-click on the first element (root?): Generate Model Code
-Right-click on the first element (root?): Generate Edit Code
-Right-click on the first element (root?): Generate Editor Code
-Right-click on editor project: Run as... Eclipse Application (This will run the wizard plugin just created)
-In the new window: New... XXX Model
-Later implement these plugins as common plugins? (like when executing Transformation)
-These metamodels can be visualized by right-clicking, Initialize Ecore Diagram, then adding models in the graphical editor and arranging them
-Ctrl+o to search
-Images can be saved

=======Create UML Example Model=========
-Use UML Meta-model from eclipse (org.eclipse.uml2.uml_5.1.0.v20150906-1225 //Cool models here!!)
-There is already a default plugin wizard for creation
-New... UML Model

=======Create Java Example Model=========
-First possibility:
    Like any common model, except that we use the java model from eclipse (org.eclipse.emf.java, acquired after creating a "java model example" on eclipse) (But this models is quite too simple)
-Second possibility
    Use the JaMoPP Java model (Too complicated to adapt)
-Third possibility
    Create a own java metamodel (Like creating any model)

=======Reopen .aird files=========
-Open Sirius model explore view
-open .aird file (unfold it)
-double click on the desired category file


=======Used Models for initial tests========
Java.ecore from JaMopp (https://github.com/DevBoost/JaMoPP/tree/master/Core/org.emftext.language.java/metamodel. 13.Nov2015)
UML from OMG website (http://www.omg.org/spec/MOF/2.4.1/, 13.Nov.2015)
Ecore metamodel from Eclipse EMF plugin (https://github.com/cloudsmith/org.eclipse.emf, 13 Nov. 2015)
Java.ecore: replace :....layout.ecore to primitiveTypes.ecore (Or remove the element?)
Rename the ecore metamodel to primitiveTypes.ecore (or reference to the actual ecore plugin)
