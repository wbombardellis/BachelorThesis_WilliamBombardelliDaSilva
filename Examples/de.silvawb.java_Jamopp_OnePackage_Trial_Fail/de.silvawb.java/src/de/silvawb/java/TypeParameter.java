/**
 */
package de.silvawb.java;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Type Parameter</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link de.silvawb.java.TypeParameter#getExtendTypes <em>Extend Types</em>}</li>
 * </ul>
 *
 * @see de.silvawb.java.JavaPackage#getTypeParameter()
 * @model
 * @generated
 */
public interface TypeParameter extends Classifier {
	/**
	 * Returns the value of the '<em><b>Extend Types</b></em>' containment reference list.
	 * The list contents are of type {@link de.silvawb.java.TypeReference}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Extend Types</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Extend Types</em>' containment reference list.
	 * @see de.silvawb.java.JavaPackage#getTypeParameter_ExtendTypes()
	 * @model containment="true"
	 * @generated
	 */
	EList<TypeReference> getExtendTypes();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * 
	 *  @return all type restrictions
	 * 
	 * <!-- end-model-doc -->
	 * @model kind="operation"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel body='org.eclipse.emf.common.util.EList< de.silvawb.java.ConcreteClassifier> result = new org.emftext.language.java.util.UniqueEList< de.silvawb.java.ConcreteClassifier>();\nfor( de.silvawb.java.TypeReference typeRef : getExtendTypes()) {\n\tde.silvawb.java.Type type = typeRef.getTarget();\n\tif (type instanceof de.silvawb.java.ConcreteClassifier) {\n\t\tresult.add(( de.silvawb.java.ConcreteClassifier)type);\n\t}\n\tif (type instanceof de.silvawb.java.Classifier) {\n\t\tresult.addAll((( de.silvawb.java.Classifier)type).getAllSuperClassifiers());\t\n\t}\n}\t\t\n\nreturn result;'"
	 * @generated
	 */
	EList<ConcreteClassifier> getAllSuperClassifiers();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * 
	 *  Returns all members of the given classifier including inner classes and 
	 *  all members of super types (extended classes and implemented interfaces).
	 *  
	 *  @param context to check protected visibility
	 *  @return member list
	 * 
	 * <!-- end-model-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='org.eclipse.emf.common.util.EList< de.silvawb.java.Member> memberList = new org.emftext.language.java.util.UniqueEList< de.silvawb.java.Member>();\n\norg.emftext.language.java.util.UniqueEList< de.silvawb.java.Type> possiblyVisibleSuperClassifier = new org.emftext.language.java.util.UniqueEList< de.silvawb.java.Type>();\nfor( de.silvawb.java.TypeReference typeReference : (( de.silvawb.java.TypeParameter)this).getExtendTypes()) {\n\tpossiblyVisibleSuperClassifier.add(typeReference.getTarget());\n}\n\nfor ( de.silvawb.java.ConcreteClassifier superClassifier : getAllSuperClassifiers()) {\n\tfor( de.silvawb.java.Member member : superClassifier.getMembers()) {\n\t\tif(member instanceof de.silvawb.java.AnnotableAndModifiable) {\t\t\t\t\t\n\t\t\tde.silvawb.java.AnnotableAndModifiable modifiable = ( de.silvawb.java.AnnotableAndModifiable) member;\n\n\t\t\tif(!modifiable.isHidden(context)) {\n\t\t\t\tmemberList.add(member);\n\t\t\t}\n\t\t\telse if (possiblyVisibleSuperClassifier.contains(superClassifier)) {\n\t\t\t\tmemberList.add(member);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tmemberList.add(member);\n\t\t}\n\t}\n\tmemberList.addAll(superClassifier.getDefaultMembers());\n}\nreturn memberList;'"
	 * @generated
	 */
	EList<Member> getAllMembers(Commentable context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * 
	 *  Returns the type bound to the given parameter in the context
	 *  of the given reference.
	 *  
	 *  @param typeReference
	 *  @param reference
	 *  @return bound type or parameter if not bound
	 * 
	 * <!-- end-model-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='org.eclipse.emf.common.util.EList< de.silvawb.java.Type> resultList = new org.eclipse.emf.common.util.BasicEList< de.silvawb.java.Type>();\nde.silvawb.java.TypeParametrizable typeParameterDeclarator = ( de.silvawb.java.TypeParametrizable) this.eContainer();\nde.silvawb.java.Reference parentReference = null;\norg.eclipse.emf.common.util.EList< de.silvawb.java.Type> prevTypeList = new org.emftext.language.java.util.UniqueEList< de.silvawb.java.Type>();\nif (reference != null && \n\t\treference.getPrevious() instanceof de.silvawb.java.NestedExpression) {\n\tde.silvawb.java.NestedExpression nestedExpression = ( de.silvawb.java.NestedExpression) reference.getPrevious();\n\tde.silvawb.java.Expression expression = null;\n\tif (nestedExpression.getExpression() instanceof de.silvawb.java.Reference) {\n\t\texpression = nestedExpression.getExpression();\n\t}\n\telse if (nestedExpression.getExpression() instanceof de.silvawb.java.ConditionalExpression) {\n\t\texpression = (( de.silvawb.java.ConditionalExpression)nestedExpression.getExpression()).getExpressionIf();\n\t}\n\n\t\n\tif (expression instanceof de.silvawb.java.Reference) {\n\t\tde.silvawb.java.Reference expressionReference = ( de.silvawb.java.Reference) expression;\n\t\t//navigate down references\n\t\twhile(expressionReference.getNext() != null) {\n\t\t\texpressionReference = expressionReference.getNext();\n\t\t}\n\t\tparentReference = expressionReference;\n\t\tde.silvawb.java.Type prevType = nestedExpression.getExpression().getType();\n\t\tif(prevType instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {\n\t\t\tfor( org.eclipse.emf.ecore.EObject aType : (( org.emftext.language.java.util.TemporalCompositeClassifier)prevType).getSuperTypes()) {\n\t\t\t\tprevTypeList.add(( de.silvawb.java.Type)aType);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tprevTypeList.add(prevType);\n\t\t}\n\t}\n\telse if (nestedExpression.getExpression() instanceof de.silvawb.java.CastExpression) {\n\t\tprevTypeList.add((( de.silvawb.java.CastExpression)nestedExpression.getExpression()).getTypeReference().getTarget());\n\t}\n}\nelse if (reference != null && reference.getPrevious() != null) {\n\tparentReference = reference.getPrevious();\n\twhile (parentReference instanceof de.silvawb.java.SelfReference) {\n\t\tif ((( de.silvawb.java.SelfReference)parentReference).getSelf() instanceof de.silvawb.java.Super) {\n\t\t\tif (parentReference.eContainer() instanceof de.silvawb.java.Reference) {\n\t\t\t\tparentReference = ( de.silvawb.java.Reference) parentReference.eContainer();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tde.silvawb.java.ConcreteClassifier containingClassifier = reference.getContainingConcreteClassifier();\n\t\t\t\tif (containingClassifier != null) {\n\t\t\t\t\tprevTypeList.add(containingClassifier);\n\t\t\t\t}\n\t\t\t\tparentReference = null;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (parentReference != null) {\n\t\tde.silvawb.java.Type prevType = parentReference.getReferencedType();\n\t\tif(prevType instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {\n\t\t\tfor( org.eclipse.emf.ecore.EObject aType : (( org.emftext.language.java.util.TemporalCompositeClassifier)prevType).getSuperTypes()) {\n\t\t\t\tprevTypeList.add(( de.silvawb.java.Type)aType);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tprevTypeList.add(prevType);\n\t\t}\n\t}\n}\nelse if (reference != null) {\n\t//prev type is on of the containing classes which can still bind by inheritance\n\tde.silvawb.java.ConcreteClassifier containingClassifier = reference.getContainingConcreteClassifier();\n\twhile (containingClassifier != null) {\n\t\tprevTypeList.add(containingClassifier);\n\t\torg.eclipse.emf.ecore.EObject container = containingClassifier.eContainer();\n\t\tif (container instanceof de.silvawb.java.Commentable) {\n\t\t\tcontainingClassifier = (( de.silvawb.java.Commentable) container).getContainingConcreteClassifier();\n\t\t} else {\n\t\t\tcontainingClassifier = null;\n\t\t}\n\t}\n}\n\nfor( de.silvawb.java.Type prevType : prevTypeList) {\n\tint typeParameterIndex = -1;\n\tif (typeParameterDeclarator instanceof de.silvawb.java.ConcreteClassifier) {\n\t\ttypeParameterIndex = typeParameterDeclarator.getTypeParameters().indexOf(this);\n\t\tif(reference != null) {\n\t\t\tde.silvawb.java.ClassifierReference classifierReference = null;\n\t\t\tif(parentReference instanceof de.silvawb.java.ElementReference) {\n\t\t\t\tde.silvawb.java.ReferenceableElement prevReferenced = (( de.silvawb.java.ElementReference) parentReference).getTarget();\n\t\t\t\tif(prevReferenced instanceof de.silvawb.java.TypedElement) {\n\t\t\t\t\tde.silvawb.java.TypeReference prevTypeReference = (( de.silvawb.java.TypedElement)prevReferenced).getTypeReference ();\n\t\t\t\t\tif (prevTypeReference != null) {\n\t\t\t\t\t\tclassifierReference = prevTypeReference.getPureClassifierReference(); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(parentReference instanceof de.silvawb.java.TypedElement) {\n\t\t\t\t//e.g. New Constructor Call\n\t\t\t\tde.silvawb.java.TypeReference prevParentReference = (( de.silvawb.java.TypedElement)parentReference).getTypeReference ();\n\t\t\t\tif (prevParentReference != null) {\n\t\t\t\t\tclassifierReference = prevParentReference.getPureClassifierReference(); \n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prevType instanceof de.silvawb.java.ConcreteClassifier) {\n\t\t\t\t//bound through inheritance?\n\t\t\t\tint idx = 0;\n\t\t\t\tfor( de.silvawb.java.ClassifierReference superClassifierReference : (( de.silvawb.java.ConcreteClassifier) prevType).getSuperTypeReferences()) {\n\t\t\t\t\tif (typeParameterIndex < superClassifierReference.getTypeArguments().size())  {\n\t\t\t\t\t\t//is this an argument for the correct class?\n\t\t\t\t\t\tif (typeParameterDeclarator.equals(superClassifierReference.getTarget()) ||\n\t\t\t\t\t\t\t\t(( de.silvawb.java.Classifier)superClassifierReference.getTarget()).getAllSuperClassifiers().contains(\n\t\t\t\t\t\t\t\t\t\ttypeParameterDeclarator)) {\t\t\t\t\t \n\t\t\t\t\t\t\tde.silvawb.java.TypeArgument arg = superClassifierReference.getTypeArguments().get(typeParameterIndex);\n\t\t\t\t\t\t\tif (arg instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\t\t\tresultList.add(idx, (( de.silvawb.java.QualifiedTypeArgument) arg).getTypeReference().getTarget());\n\t\t\t\t\t\t\t\tidx++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\torg.eclipse.emf.common.util.EList< de.silvawb.java.TypeArgument> typeArgumentList;\n\t\t\t\torg.emftext.language.java.util.TemporalTypeArgumentHolder ttah = null;\n\t\t\t\tfor( org.eclipse.emf.common.notify.Adapter adapter : prevType.eAdapters()) {\n\t\t\t\t\tif (adapter instanceof org.emftext.language.java.util.TemporalTypeArgumentHolder) {\n\t\t\t\t\t\tttah = ( org.emftext.language.java.util.TemporalTypeArgumentHolder) adapter; \n\t\t\t\t\t\tprevType.eAdapters().remove(ttah);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ttah != null) {\n\t\t\t\t\ttypeArgumentList = ttah.getTypeArguments();\n\t\t\t\t}\n\t\t\t\telse if (classifierReference != null) {\n\t\t\t\t\ttypeArgumentList = classifierReference.getTypeArguments();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttypeArgumentList = org.eclipse.emf.common.util.ECollections.emptyEList();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (typeParameterIndex < typeArgumentList.size())  {\n\t\t\t\t\tde.silvawb.java.TypeArgument arg = typeArgumentList.get(typeParameterIndex);\n\t\t\t\t\tif (arg instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\tde.silvawb.java.ClassifierReference theTypeRef = (( de.silvawb.java.QualifiedTypeArgument) arg).getTypeReference().getPureClassifierReference();\n\t\t\t\t\t\tif (theTypeRef != null) {\n\t\t\t\t\t\t\tde.silvawb.java.Type theType = theTypeRef.getBoundTarget(parentReference);\n\t\t\t\t\t\t\tif (theType != null) {\n\t\t\t\t\t\t\t\tif (!theTypeRef.getTypeArguments().isEmpty()) {\n\t\t\t\t\t\t\t\t\tttah = new org.emftext.language.java.util.TemporalTypeArgumentHolder();\n\t\t\t\t\t\t\t\t\tttah.getTypeArguments().addAll(theTypeRef.getTypeArguments());\n\t\t\t\t\t\t\t\t\ttheType.eAdapters().add(ttah);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresultList.add(0, theType);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (arg instanceof de.silvawb.java.ExtendsTypeArgument) {\n\t\t\t\t\t\tfor( de.silvawb.java.TypeReference extendedType : (( de.silvawb.java.ExtendsTypeArgument) arg).getExtendTypes()) {\n\t\t\t\t\t\t\tresultList.add(0, extendedType.getBoundTarget(parentReference));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t\telse if (prevType instanceof de.silvawb.java.TypeParameter) {\n\t\t\t\t//the prev. type parameter, although unbound, may contain type restrictions through extends \n\t\t\t\tresultList.add(prevType);\n\t\t\t\tfor( de.silvawb.java.TypeReference extendedRef : (( de.silvawb.java.TypeParameter) prevType).getExtendTypes()) {\n\t\t\t\t\tde.silvawb.java.ConcreteClassifier extended = ( de.silvawb.java.ConcreteClassifier)extendedRef.getTarget();\n\t\t\t\t\tint idx = (( de.silvawb.java.TypeParametrizable)prevType.eContainer()).getTypeParameters().indexOf(prevType);\n\t\t\t\t\tif (extended.getTypeParameters().size() > idx) {\n\t\t\t\t\t\t//also add more precise bindings from extensions\n\t\t\t\t\t\tresultList.add(extended.getTypeParameters().get(idx));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(reference != null && reference.eContainer() instanceof de.silvawb.java.ReflectiveClassReference) {\n\t\t\tif (reference.eContainer().eContainer() instanceof de.silvawb.java.Reference) {\n\t\t\t\t//the \".class\" instantiation implicitly binds the T parameter of java.lang.Class to the class itself\n\t\t\t\tresultList.add(0, (( de.silvawb.java.Reference)reference.eContainer().eContainer()).getReferencedType());\n\t\t\t}\n\t\t}\n\t}\n}\n\nif (typeParameterDeclarator instanceof de.silvawb.java.Method) {\n\tif (reference instanceof de.silvawb.java.MethodCall) {\n\t\tde.silvawb.java.Method method = ( de.silvawb.java.Method) typeParameterDeclarator;\n\t\tde.silvawb.java.MethodCall methodCall = ( de.silvawb.java.MethodCall) reference;\n\t\tif(method.getTypeParameters().size() == methodCall.getCallTypeArguments().size()) {\n\t\t\tde.silvawb.java.TypeArgument typeArgument = methodCall.getCallTypeArguments().get(method.getTypeParameters().indexOf(this));\n\t\t\tif (typeArgument instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\tresultList.add(0, (( de.silvawb.java.QualifiedTypeArgument)typeArgument).getTypeReference().getBoundTarget(parentReference)); \n\t\t\t} \n\t\t}\n\n\t\t//class type parameter\n\t\tint idx = method.getParameters().indexOf(typeReference.eContainer());\n\t\t\n\t\t//method type parameter\n\t\tif (idx == -1) {\n\t\t\tfor( de.silvawb.java.Parameter parameter : method.getParameters()) {\n\t\t\t\tfor ( de.silvawb.java.TypeArgument typeArgument : parameter.getTypeArguments()) {\n\t\t\t\t\tif(typeArgument instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\tif((( de.silvawb.java.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {\n\t\t\t\t\t\t\tidx = method.getParameters().indexOf(parameter);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tde.silvawb.java.ClassifierReference paramTypeReference = parameter.getTypeReference().getPureClassifierReference();\n\t\t\t\tif (paramTypeReference != null) {\n\t\t\t\t\tfor ( de.silvawb.java.TypeArgument typeArgument : paramTypeReference.getTypeArguments()) {\n\t\t\t\t\t\tif(typeArgument instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\t\tif(this.equals((( de.silvawb.java.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget())) {\n\t\t\t\t\t\t\t\tidx = method.getParameters().indexOf(parameter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (idx < methodCall.getArguments().size() && idx >= 0) {\n\t\t\tde.silvawb.java.Expression argument = methodCall.getArguments().get(idx);\n\t\t\tde.silvawb.java.Parameter parameter = method.getParameters().get(idx);\n\t\t\tde.silvawb.java.ClassifierReference parameterType = parameter.getTypeReference().getPureClassifierReference();\n\t\t\tif (argument instanceof de.silvawb.java.NewConstructorCall) {\n\t\t\t\tde.silvawb.java.ClassifierReference argumentType = (( de.silvawb.java.NewConstructorCall)argument).getTypeReference().getPureClassifierReference();\n\t\t\t\tif (argumentType != null && parameterType.getTypeArguments().size() == argumentType.getTypeArguments().size()) {\n\t\t\t\t\tfor( de.silvawb.java.TypeArgument typeArgument : parameterType.getTypeArguments()) {\n\t\t\t\t\t\tif(typeArgument instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\t\tif((( de.silvawb.java.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {\n\t\t\t\t\t\t\t\tresultList.add(0, (( de.silvawb.java.QualifiedTypeArgument)argumentType.getTypeArguments().get(parameterType.getTypeArguments().indexOf(typeArgument))).getTypeReference(\n\t\t\t\t\t\t\t\t\t).getTarget());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (argumentType != null && parameterType.getTarget() instanceof de.silvawb.java.TypeParameter) {\n\t\t\t\t\tresultList.add(0,argumentType.getTarget());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (parameterType != null && argument instanceof de.silvawb.java.Reference) {\n\t\t\t\tde.silvawb.java.Reference argReference = ( de.silvawb.java.Reference) argument;\n\t\t\t\t\n\t\t\t\twhile (argReference.getNext() instanceof de.silvawb.java.Reference &&\n\t\t\t\t\t\t!(argReference.getNext() instanceof de.silvawb.java.ReflectiveClassReference) ) {\n\t\t\t\t\targReference = argReference.getNext();\n\t\t\t\t}\n\t\n\t\t\t\t\n\t\t\t\tif (argReference instanceof de.silvawb.java.ElementReference) {\n\t\t\t\t\tde.silvawb.java.ElementReference elementReference = ( de.silvawb.java.ElementReference) argReference;\n\t\t\t\t\twhile (elementReference.getNext() instanceof de.silvawb.java.ElementReference) {\n\t\t\t\t\t\telementReference = ( de.silvawb.java.ElementReference) elementReference.getNext();\n\t\t\t\t\t}\n\t\t\t\t\tif (elementReference.getTarget() instanceof de.silvawb.java.TypedElement) {\n\t\t\t\t\t\tde.silvawb.java.ClassifierReference argumentType = (( de.silvawb.java.TypedElement)elementReference.getTarget()).getTypeReference().getPureClassifierReference();\n\t\t\t\t\t\tif (argumentType != null && parameterType.getTypeArguments().size() == argumentType.getTypeArguments().size()) {\n\t\t\t\t\t\t\tfor( de.silvawb.java.TypeArgument typeArgument : parameterType.getTypeArguments()) {\n\t\t\t\t\t\t\t\tif(typeArgument instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\t\t\t\tif((( de.silvawb.java.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {\n\t\t\t\t\t\t\t\t\t\tint idx2 = parameterType.getTypeArguments().indexOf(typeArgument);\n\t\t\t\t\t\t\t\t\t\tif (argumentType.getTypeArguments().get(idx2) instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\t\t\t\t\t\tresultList.add(0, (( de.silvawb.java.QualifiedTypeArgument)argumentType.getTypeArguments().get(idx2)).getTypeReference().getTarget());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse if (argumentType.getTypeArguments().get(idx2) instanceof de.silvawb.java.ExtendsTypeArgument) {\n\t\t\t\t\t\t\t\t\t\t\tfor( de.silvawb.java.TypeReference extendedType : (( de.silvawb.java.ExtendsTypeArgument) argumentType.getTypeArguments().get(idx2)).getExtendTypes()) {\n\t\t\t\t\t\t\t\t\t\t\t\tresultList.add(0, extendedType.getTarget());\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (argumentType != null && parameterType.getTarget() instanceof de.silvawb.java.TypeParameter) {\n\t\t\t\t\t\t\tresultList.add(0,argumentType.getTarget());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(elementReference.getNext() instanceof de.silvawb.java.ReflectiveClassReference) {\n\t\t\t\t\t\tif (parameterType.getTypeArguments().size() == 1) {\n\t\t\t\t\t\t\tfor( de.silvawb.java.TypeArgument typeArgument : parameterType.getTypeArguments()) {\n\t\t\t\t\t\t\t\tif(typeArgument instanceof de.silvawb.java.QualifiedTypeArgument) {\n\t\t\t\t\t\t\t\t\tif((( de.silvawb.java.QualifiedTypeArgument) typeArgument).getTypeReference().getTarget().equals(this)) {\n\t\t\t\t\t\t\t\t\t\tresultList.add(0, elementReference.getReferencedType());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (parameterType.getTarget() instanceof de.silvawb.java.TypeParameter) {\n\t\t\t\t\t\twhile (argReference.getNext() instanceof de.silvawb.java.Reference) {\n\t\t\t\t\t\t\targReference = argReference.getNext();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresultList.add(0, (( de.silvawb.java.Reference) argReference).getReferencedType());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t//return type\n\t\tif(method.equals(typeReference.eContainer())) {\n\t\t\t//bound by the type of a method argument?\n\t\t\torg.eclipse.emf.common.util.EList< de.silvawb.java.Classifier> allSuperTypes = null;\n\t\t\tfor( de.silvawb.java.Parameter parameter : method.getParameters()) {\n\t\t\t\tif(this.equals(parameter.getTypeReference().getTarget())) {\n\t\t\t\t\tidx = method.getParameters().indexOf(parameter);\n\t\t\t\t\tde.silvawb.java.Classifier argumentType = ( de.silvawb.java.Classifier) methodCall.getArguments().get(idx).getType();\n\t\t\t\t\tif(allSuperTypes == null) {\n\t\t\t\t\t\tallSuperTypes = new org.emftext.language.java.util.UniqueEList< de.silvawb.java.Classifier>();\n\t\t\t\t\t\tallSuperTypes.add(argumentType);\n\t\t\t\t\t\tallSuperTypes.addAll(argumentType.getAllSuperClassifiers());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tallSuperTypes.add(argumentType);\n\t\t\t\t\t\torg.eclipse.emf.common.util.EList< de.silvawb.java.Classifier> allOtherSuperTypes = new org.emftext.language.java.util.UniqueEList< de.silvawb.java.Classifier>();\n\t\t\t\t\t\tallOtherSuperTypes.add(argumentType);\n\t\t\t\t\t\tallOtherSuperTypes.addAll(argumentType.getAllSuperClassifiers());\n\t\t\t\t\t\torg.eclipse.emf.common.util.EList< de.silvawb.java.Classifier> temp = allSuperTypes;\n\t\t\t\t\t\tallSuperTypes = new org.emftext.language.java.util.UniqueEList< de.silvawb.java.Classifier>();\n\t\t\t\t\t\tfor( de.silvawb.java.Classifier st : allOtherSuperTypes) {\n\t\t\t\t\t\t\tif(temp.contains(st)) {\n\t\t\t\t\t\t\t\tallSuperTypes.add(st);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t\t\t}\n\t\t\t//all types given by all bindings\n\t\t\tif (allSuperTypes != null) {\n\t\t\t\tresultList.addAll(allSuperTypes);\n\t\t\t}\n\t\t}\n\t}\n}\n\n//remove nulls\nfor( java.util.Iterator<?> it = resultList.iterator(); it.hasNext(); ) {\n\tif (it.next() == null) {\n\t\tit.remove();\n\t}\n}\n\nif(resultList.isEmpty() || \n\t\t(resultList.size() == 1 && resultList.get(0).equals(this))) {\n\treturn this;\n}\nelse {\n\torg.emftext.language.java.util.TemporalCompositeClassifier temp = new org.emftext.language.java.util.TemporalCompositeClassifier(this);\n\tfor( de.silvawb.java.Type aResult : resultList) {\n\t\tif(aResult instanceof de.silvawb.java.PrimitiveType) {\n\t\t\taResult = (( de.silvawb.java.PrimitiveType) aResult).wrapPrimitiveType();\n\t\t}\n\t\t\n\t\tif (aResult instanceof org.emftext.language.java.util.TemporalCompositeClassifier) {\n\t\t\t//flatten\n\t\t\ttemp.getSuperTypes().addAll((( org.emftext.language.java.util.TemporalCompositeClassifier)aResult).getSuperTypes());\n\t\t}\n\t\telse {\n\t\t\ttemp.getSuperTypes().add(( de.silvawb.java.Classifier) aResult);\t\n\t\t}\n\t}\n\ttemp.getSuperTypes().add(this);\n\treturn temp;\n}'"
	 * @generated
	 */
	Type getBoundType(TypeReference typeReference, Reference reference);

} // TypeParameter
