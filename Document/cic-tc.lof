\select@language {english}
\select@language {german}
\select@language {english}
\addvspace {10\p@ }
\addvspace {10\p@ }
\select@language {german}
\addvspace {10\p@ }
\select@language {english}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces On the left is a depiction of the theoretical definitions of system, model, metamodel, meta-metamodel and modeling language. Like stated before, a system is represented by models, which themselves are expressed in languages and are conform to meta-models. A more concrete and practical illustration of the definitions is on the right. This example shows a scenario very close to the implementation made in chapter \ref {chapter:metamodel_relations}.\relax }}{16}{figure.caption.1}
\contentsline {figure}{\numberline {2.2}{\ignorespaces An example of a network of models very similar to the one developed in this work.\relax }}{17}{figure.caption.2}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Part of MOF definition, which handles basically classes, properties, operations, associations, and generalization.\relax }}{17}{figure.caption.3}
\contentsline {figure}{\numberline {2.4}{\ignorespaces Ecore definition illustrating the use of classes, attributes, operations, references and super types, analogously to the figure \ref {fig:emof_classes}\relax }}{18}{figure.caption.4}
\contentsline {figure}{\numberline {2.5}{\ignorespaces The morphism $m: G \rightarrow H$ is a triple graph $m = (m_s,m_c,m_t)$.\relax }}{19}{figure.caption.5}
\contentsline {figure}{\numberline {2.6}{\ignorespaces In this kind of diagram for triple rules a triple graph is represented by three columns (left model domain, correspondence domain, and right model domain) each one representing respectively the source model elements, the correspondence between source and target and finally the target model elements. A triple rule in turn is represented by a triple graph in black (left-hand side) plus a triple graph in green(right-hand side) (see \ref {fig:tgg_rule}). Because an axiom is a triple rule with empty left-hand side, only green graph occurs in an axiom (see \ref {fig:tgg_axiom}).\relax }}{20}{figure.caption.6}
\contentsline {figure}{\numberline {2.7}{\ignorespaces Illustration of the definitions of model relation, transformation and synchronization as well as triple graph grammars (TGG). Relations between metamodels are coded by triple graphs; additions in the models are coded by triple rules, which are then organized in a TGG. A TGG can be used to derive operational semantic definitions. The concept of modeling language is pictured as red lines.\relax }}{20}{figure.caption.7}
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces A network of meta-models in the Java technological spaces\relax }}{23}{figure.caption.8}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Simplification of the \emph {UMLClassDiagram} meta-model\relax }}{27}{figure.caption.9}
\contentsline {figure}{\numberline {4.3}{\ignorespaces An example of a model \emph {UMLClassDiagram} containing one \emph {Model} (\emph {Example01}), one \emph {Package} (\emph {main}), three \emph {Classes} (\emph {Person}, \emph {Drive} and \emph {Car}), and one \emph {Interface}, namely \emph {Drivable}.\relax }}{27}{figure.caption.10}
\contentsline {figure}{\numberline {4.4}{\ignorespaces Simplification of the \emph {UMLSequenceDiagram} meta-model\relax }}{28}{figure.caption.11}
\contentsline {figure}{\numberline {4.5}{\ignorespaces An example of a model \emph {UMLSequenceDiagram} containing one \emph {Interaction} (\emph {Interaction01}), two \emph {Lifelines} (\emph {:Driver} and \emph {:Drivable}), and four \emph {Messages}.\relax }}{29}{figure.caption.12}
\contentsline {figure}{\numberline {4.6}{\ignorespaces Simplification of the \emph {UMLContract} meta-model\relax }}{30}{figure.caption.13}
\contentsline {figure}{\numberline {4.7}{\ignorespaces The same model from the picture \ref {fig:uml_metamodel_class_example} but with a more comprehensive visualization of elements, including those from \emph {UMLContract}, namely lines 6 to 7 and 14 to 15 (\emph {Constraint} with \emph {Interval}), and lines 16 to 19 (\emph {Constraint} with \emph {OpaqueExpression}).\relax }}{31}{figure.caption.14}
\contentsline {figure}{\numberline {4.8}{\ignorespaces The Java meta-model created. It goes beyond the common classes and attributes scenario, by comprising also annotations and statements.\relax }}{32}{figure.caption.15}
\contentsline {figure}{\numberline {4.9}{\ignorespaces The equivalent \emph {Java} version of the \emph {UML} models from the pictures \ref {fig:uml_metamodel_class_example}\relax }}{33}{figure.caption.16}
\contentsline {figure}{\numberline {4.10}{\ignorespaces ..\relax }}{34}{figure.caption.17}
\contentsline {figure}{\numberline {4.11}{\ignorespaces ..\relax }}{35}{figure.caption.18}
\contentsline {figure}{\numberline {4.12}{\ignorespaces ..\relax }}{36}{figure.caption.19}
\contentsline {figure}{\numberline {4.13}{\ignorespaces \relax }}{37}{figure.caption.20}
\contentsline {figure}{\numberline {4.14}{\ignorespaces \relax }}{38}{figure.caption.21}
\contentsline {figure}{\numberline {4.15}{\ignorespaces \relax }}{38}{figure.caption.22}
\contentsline {figure}{\numberline {4.16}{\ignorespaces \relax }}{39}{figure.caption.23}
\contentsline {figure}{\numberline {4.17}{\ignorespaces \relax }}{40}{figure.caption.24}
\contentsline {figure}{\numberline {4.18}{\ignorespaces \relax }}{41}{figure.caption.25}
\contentsline {figure}{\numberline {4.19}{\ignorespaces \relax }}{42}{figure.caption.26}
\contentsline {figure}{\numberline {4.20}{\ignorespaces \relax }}{43}{figure.caption.27}
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
